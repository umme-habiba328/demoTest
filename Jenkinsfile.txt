pipeline {
    agent any

    triggers {
        pollSCM('H/2 * * * *') // Schedule to poll SCM every minute
    }
    
    stages {
        stage('Git Clone') {
            steps {
                git branch: 'main', credentialsId: 'jenkins', url: 'git@github.com:umme-habiba328/BJIT_DevOps_Final_Project.git'
                // Get some code from a GitHub repository
            }
        }
        stage('Build Jar file') {
            steps {
                sh 'mvn clean install'
            }
        }
        stage('Build Docker image') {
            steps {
                script {
                    dockerimage = docker.build("ummehabiba23/sparklms:${env.BUILD_NUMBER}")
                }
            }
        }
        stage('Push to Docker hub') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'docker-hub') {
                        dockerimage.push("${env.BUILD_NUMBER}")
                    }
                }
            }
        }
        
        stage('Deploy') {
            steps {
                script{
                        sh "sed -i 's|ummehabiba23/sparklms:latest|ummehabiba23/sparklms:${env.BUILD_NUMBER}|' deployment.yml"
                        sh '/usr/local/bin/kubectl delete -f deployment.yml'
                        sh '/usr/local/bin/kubectl apply -f deployment.yml'
                        sh "/usr/local/bin/kubectl get pods"
                    }
                }
            }
        }
    }
////////////////////////////////////////////////////

pipeline {
    agent any
    
    triggers {
        pollSCM('H/2 * * * *') // Schedule to poll SCM every minute
    }
    stages {
         stage('Git Clone') {
            steps {
                script {
                    git branch: 'main', credentialsId: 'jenkins', url: 'git@github.com:umme-habiba328/BJIT_DevOps_Final_Project.git'
                    sh "sed -i 's/mysql-service/team-kernull-rds.cjldgoxvvwoc.us-west-2.rds.amazonaws.com/g' /var/lib/jenkins/workspace/BJIT_AWS_Final_Project/src/main/resources/application.properties"
                    sh "sed -i 's/sparklmsdb/habibasparklms/g' /var/lib/jenkins/workspace/BJIT_AWS_Final_Project/src/main/resources/application.properties"
                    
                    
                }
            }
         }
        stage('Maven Build') {
             steps {
                  sh 'mvn clean install'
            }
        }
         stage('Copy JAR to EC2') {
            steps {
                script {
                    withCredentials([sshUserPrivateKey(credentialsId: '44.224.79.13', keyFileVariable: 'SSH_KEY')]) {
                        def sourceFilePath = '/var/lib/jenkins/workspace/BJIT_AWS_Final_Project/target/spark-lms-0.0.1-SNAPSHOT.jar'
                        def destinationPath = '/home/ec2-user/'

                        def scpCommand = "scp -i $SSH_KEY $sourceFilePath ec2-user@44.224.79.13:$destinationPath"
                        sh scpCommand
                    }
                }
            }
        }
        stage('Deploy') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: '44.224.79.13', keyFileVariable: 'SSH_KEY')]) {
                    script {
                        def sshKill = "ssh -o StrictHostKeyChecking=no -i $SSH_KEY ec2-user@44.224.79.13 'pkill java || true'"
                        sh sshKill
                        def sshCommand = "ssh -o StrictHostKeyChecking=no -i ${env.SSH_KEY} ec2-user@44.224.79.13 'java -jar /home/ec2-user/spark-lms-0.0.1-SNAPSHOT.jar &> /dev/null &'"
                        sh sshCommand
                    }
                }
            }
        }
        
    }
}